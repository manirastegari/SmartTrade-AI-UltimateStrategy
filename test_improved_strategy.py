#!/usr/bin/env python3
"""
Test the improved Ultimate Strategy with a small sample
Verify Excel export is informative
"""

import sys
import pandas as pd
from datetime import datetime
import pytz

# Add project path
sys.path.insert(0, '/Users/manirastegari/maniProject/SmartTrade-AI-UltimateStrategy')

from advanced_analyzer import AdvancedTradingAnalyzer
from ultimate_strategy_analyzer_improved import ImprovedUltimateStrategyAnalyzer

def test_improved_strategy():
    """Test the improved strategy with a small sample"""
    
    print("=" * 80)
    print("TESTING IMPROVED ULTIMATE STRATEGY")
    print("=" * 80)
    print()
    
    # Initialize analyzers
    print("1. Initializing analyzers...")
    analyzer = AdvancedTradingAnalyzer(enable_training=False, data_mode="light")
    
    # Limit to small test set for quick testing
    test_symbols = ['AAPL', 'MSFT', 'GOOGL', 'NVDA', 'TSLA', 'AMZN', 'META', 'JPM', 'V', 'WMT']
    analyzer.stock_universe = test_symbols
    print(f"   Using test universe: {len(test_symbols)} stocks")
    print()
    
    # Initialize improved strategy
    improved_ultimate = ImprovedUltimateStrategyAnalyzer(analyzer)
    
    # Progress callback
    def progress_callback(message, progress):
        print(f"   [{progress:3d}%] {message}")
    
    # Run the improved strategy
    print("2. Running IMPROVED Ultimate Strategy...")
    print("   (All 4 strategies analyze the SAME stocks)")
    print()
    
    start_time = datetime.now(pytz.timezone('US/Eastern'))
    
    results = improved_ultimate.run_ultimate_strategy(
        progress_callback=progress_callback
    )
    
    end_time = datetime.now(pytz.timezone('US/Eastern'))
    duration = end_time - start_time
    
    print()
    print("=" * 80)
    print("RESULTS")
    print("=" * 80)
    print()
    
    # Display consensus recommendations
    consensus_recs = results.get('consensus_recommendations', [])
    
    print(f"Total stocks analyzed: {results.get('total_analyzed', 0)}")
    print(f"Consensus recommendations: {len(consensus_recs)}")
    print(f"Duration: {duration}")
    print()
    
    # Show top consensus picks
    print("=" * 80)
    print("TOP CONSENSUS PICKS (Sorted by Agreement)")
    print("=" * 80)
    print()
    
    # Sort by strategies agreeing
    consensus_recs.sort(key=lambda x: (x['strategies_agreeing'], x['consensus_score']), reverse=True)
    
    for i, stock in enumerate(consensus_recs[:10], 1):
        print(f"{i}. {stock['symbol']}")
        print(f"   Consensus Score: {stock['consensus_score']:.2f}")
        print(f"   Strategies Agreeing: {stock['strategies_agreeing']}/4")
        print(f"   Recommendation: {stock['recommendation']}")
        print(f"   Confidence: {stock['confidence']}%")
        print(f"   Risk Level: {stock['risk_level']}")
        print()
        
        # Show individual strategy scores
        print("   Individual Strategy Scores:")
        for strategy_name, details in stock['strategy_details'].items():
            print(f"      {strategy_name:15s}: Score {details['score']:.2f} ‚Üí {details['recommendation']}")
        print()
    
    # Export to Excel for testing
    print("=" * 80)
    print("EXCEL EXPORT TEST")
    print("=" * 80)
    print()
    
    timestamp_str = start_time.strftime("%Y%m%d_%H%M%S")
    filename = f"daily_results/TEST_ImprovedStrategy_{timestamp_str}.xlsx"
    
    print(f"Creating Excel file: {filename}")
    
    try:
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
            
            # Sheet 1: Analysis Info
            info_data = {
                'Metric': [
                    'Analysis Type',
                    'Start Date',
                    'Start Time',
                    'End Date',
                    'End Time',
                    'Duration (seconds)',
                    'Total Stocks Analyzed',
                    'Total Recommendations',
                    '4/4 Strategies Agree',
                    '3/4 Strategies Agree',
                    '2/4 Strategies Agree',
                    '1/4 Strategies Agree',
                    'Test Mode',
                    'Generated By'
                ],
                'Value': [
                    'IMPROVED Ultimate Strategy - True Consensus',
                    start_time.strftime('%Y-%m-%d'),
                    start_time.strftime('%H:%M:%S %Z'),
                    end_time.strftime('%Y-%m-%d'),
                    end_time.strftime('%H:%M:%S %Z'),
                    f"{duration.total_seconds():.2f}",
                    results.get('total_analyzed', 0),
                    len(consensus_recs),
                    len([r for r in consensus_recs if r['strategies_agreeing'] == 4]),
                    len([r for r in consensus_recs if r['strategies_agreeing'] == 3]),
                    len([r for r in consensus_recs if r['strategies_agreeing'] == 2]),
                    len([r for r in consensus_recs if r['strategies_agreeing'] <= 1]),
                    'YES (10 stocks only)',
                    'SmartTrade AI Test Suite'
                ]
            }
            info_df = pd.DataFrame(info_data)
            info_df.to_excel(writer, sheet_name='Analysis_Info', index=False)
            
            # Sheet 2: Consensus Recommendations
            if consensus_recs:
                # Flatten strategy details for Excel
                recs_for_excel = []
                for rec in consensus_recs:
                    flat_rec = {
                        'Symbol': rec['symbol'],
                        'Consensus_Score': rec['consensus_score'],
                        'Score_Consistency': rec['score_consistency'],
                        'Strategies_Agreeing': rec['strategies_agreeing'],
                        'Strong_Buy_Count': rec['strong_buy_count'],
                        'Consensus_Strength': rec['consensus_strength'],
                        'Recommendation': rec['recommendation'],
                        'Confidence': rec['confidence'],
                        'Risk_Level': rec['risk_level'],
                        'Current_Price': rec.get('current_price', 0),
                        'Target_Price': rec.get('target_price', 0),
                        'Upside_Potential': rec.get('upside_potential', 0),
                        'Market_Cap': rec.get('market_cap', 0),
                        'Sector': rec.get('sector', 'Unknown')
                    }
                    
                    # Add individual strategy scores
                    for strategy_name, details in rec['strategy_details'].items():
                        flat_rec[f'{strategy_name}_score'] = details['score']
                        flat_rec[f'{strategy_name}_rec'] = details['recommendation']
                    
                    recs_for_excel.append(flat_rec)
                
                recs_df = pd.DataFrame(recs_for_excel)
                recs_df.to_excel(writer, sheet_name='Consensus_Recommendations', index=False)
            
            # Sheet 3: High Consensus Only (3-4 strategies agree)
            high_consensus = [r for r in consensus_recs if r['strategies_agreeing'] >= 3]
            if high_consensus:
                high_cons_data = []
                for rec in high_consensus:
                    high_cons_data.append({
                        'Symbol': rec['symbol'],
                        'Consensus_Score': rec['consensus_score'],
                        'Strategies_Agreeing': f"{rec['strategies_agreeing']}/4",
                        'Recommendation': rec['recommendation'],
                        'Confidence': f"{rec['confidence']}%",
                        'Risk_Level': rec['risk_level'],
                        'Current_Price': f"${rec.get('current_price', 0):.2f}",
                        'Target_Price': f"${rec.get('target_price', 0):.2f}",
                        'Upside': f"{rec.get('upside_potential', 0):.1f}%"
                    })
                
                high_cons_df = pd.DataFrame(high_cons_data)
                high_cons_df.to_excel(writer, sheet_name='High_Consensus_Picks', index=False)
            
            # Sheet 4: Strategy Comparison
            strategy_comparison = []
            for symbol in test_symbols:
                row = {'Symbol': symbol}
                for rec in consensus_recs:
                    if rec['symbol'] == symbol:
                        for strategy_name, details in rec['strategy_details'].items():
                            row[f'{strategy_name}_score'] = details['score']
                        row['consensus_score'] = rec['consensus_score']
                        row['agreement'] = f"{rec['strategies_agreeing']}/4"
                        break
                if len(row) > 1:  # Has data
                    strategy_comparison.append(row)
            
            if strategy_comparison:
                comp_df = pd.DataFrame(strategy_comparison)
                comp_df.to_excel(writer, sheet_name='Strategy_Comparison', index=False)
        
        print(f"‚úÖ Excel file created successfully!")
        print()
        
        # Show Excel structure
        print("Excel File Structure:")
        print("  üìä Sheet 1: Analysis_Info (with start/end timestamps)")
        print("  üìä Sheet 2: Consensus_Recommendations (all stocks with scores)")
        print("  üìä Sheet 3: High_Consensus_Picks (3-4 strategies agree)")
        print("  üìä Sheet 4: Strategy_Comparison (side-by-side scores)")
        print()
        
        print(f"Open file: open {filename}")
        print()
        
    except Exception as e:
        print(f"‚ùå Error creating Excel: {str(e)}")
        import traceback
        traceback.print_exc()
    
    print("=" * 80)
    print("TEST COMPLETE")
    print("=" * 80)
    print()
    print("Summary:")
    print(f"  ‚úÖ Improved strategy uses TRUE CONSENSUS (all strategies analyze same stocks)")
    print(f"  ‚úÖ Found {len([r for r in consensus_recs if r['strategies_agreeing'] >= 3])} high-consensus picks")
    print(f"  ‚úÖ Excel export includes detailed timestamps and strategy breakdown")
    print(f"  ‚úÖ Automated scheduler will use this improved logic")
    print()

if __name__ == "__main__":
    test_improved_strategy()
